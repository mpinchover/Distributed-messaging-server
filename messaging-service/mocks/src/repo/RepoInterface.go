// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	records "messaging-service/src/types/records"

	mock "github.com/stretchr/testify/mock"
)

// RepoInterface is an autogenerated mock type for the RepoInterface type
type RepoInterface struct {
	mock.Mock
}

// DeleteRoom provides a mock function with given fields: roomUUID
func (_m *RepoInterface) DeleteRoom(roomUUID string) error {
	ret := _m.Called(roomUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roomUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthProfileByEmail provides a mock function with given fields: email
func (_m *RepoInterface) GetAuthProfileByEmail(email string) (*records.AuthProfile, error) {
	ret := _m.Called(email)

	var r0 *records.AuthProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*records.AuthProfile, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *records.AuthProfile); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*records.AuthProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembersByRoomUUID provides a mock function with given fields: roomUUID
func (_m *RepoInterface) GetMembersByRoomUUID(roomUUID string) ([]*records.Member, error) {
	ret := _m.Called(roomUUID)

	var r0 []*records.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*records.Member, error)); ok {
		return rf(roomUUID)
	}
	if rf, ok := ret.Get(0).(func(string) []*records.Member); ok {
		r0 = rf(roomUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*records.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageByUUID provides a mock function with given fields: uuid
func (_m *RepoInterface) GetMessageByUUID(uuid string) (*records.Message, error) {
	ret := _m.Called(uuid)

	var r0 *records.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*records.Message, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *records.Message); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*records.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByRoomUUID provides a mock function with given fields: roomUUID, offset
func (_m *RepoInterface) GetMessagesByRoomUUID(roomUUID string, offset int) ([]*records.Message, error) {
	ret := _m.Called(roomUUID, offset)

	var r0 []*records.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*records.Message, error)); ok {
		return rf(roomUUID, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*records.Message); ok {
		r0 = rf(roomUUID, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*records.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(roomUUID, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByRoomUUIDs provides a mock function with given fields: roomUUIDs, offset
func (_m *RepoInterface) GetMessagesByRoomUUIDs(roomUUIDs string, offset int) ([]*records.Message, error) {
	ret := _m.Called(roomUUIDs, offset)

	var r0 []*records.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*records.Message, error)); ok {
		return rf(roomUUIDs, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*records.Message); ok {
		r0 = rf(roomUUIDs, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*records.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(roomUUIDs, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomByRoomUUID provides a mock function with given fields: roomUUID
func (_m *RepoInterface) GetRoomByRoomUUID(roomUUID string) (*records.Room, error) {
	ret := _m.Called(roomUUID)

	var r0 *records.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*records.Room, error)); ok {
		return rf(roomUUID)
	}
	if rf, ok := ret.Get(0).(func(string) *records.Room); ok {
		r0 = rf(roomUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*records.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomsByUserUUID provides a mock function with given fields: uuid, offset
func (_m *RepoInterface) GetRoomsByUserUUID(uuid string, offset int) ([]*records.Room, error) {
	ret := _m.Called(uuid, offset)

	var r0 []*records.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*records.Room, error)); ok {
		return rf(uuid, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*records.Room); ok {
		r0 = rf(uuid, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*records.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(uuid, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaveRoom provides a mock function with given fields: userUUID, roomUUID
func (_m *RepoInterface) LeaveRoom(userUUID string, roomUUID string) error {
	ret := _m.Called(userUUID, roomUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userUUID, roomUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAuthProfile provides a mock function with given fields: authProfile
func (_m *RepoInterface) SaveAuthProfile(authProfile *records.AuthProfile) error {
	ret := _m.Called(authProfile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*records.AuthProfile) error); ok {
		r0 = rf(authProfile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMessage provides a mock function with given fields: msg
func (_m *RepoInterface) SaveMessage(msg *records.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*records.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRoom provides a mock function with given fields: room
func (_m *RepoInterface) SaveRoom(room *records.Room) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(*records.Room) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSeenBy provides a mock function with given fields: seenBy
func (_m *RepoInterface) SaveSeenBy(seenBy *records.SeenBy) error {
	ret := _m.Called(seenBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*records.SeenBy) error); ok {
		r0 = rf(seenBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMessage provides a mock function with given fields: message
func (_m *RepoInterface) UpdateMessage(message *records.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*records.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: email, hashedPassword
func (_m *RepoInterface) UpdatePassword(email string, hashedPassword string) error {
	ret := _m.Called(email, hashedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoInterface creates a new instance of RepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoInterface {
	mock := &RepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
